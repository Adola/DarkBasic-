string Description = "This shader uses applies a cartoon lighting to the object and provides data for a cartoon fullscreen shader.";
string Thumbnail = "CartoonObject.png";

float4x4 WorldViewProj : WorldViewProjection;
float4x4 World : World;
float4x4 WorldT : WorldTranspose;
float4x4 WorldIT : WorldInverseTranspose;

float4 LightPos[8] : LIGHTPOSITION;
float3 LightColor[8] : LIGHTCOLOR;
float3 AmbientColor : AMBIENTCOLOR;

float time : TIME;

float lightSteps
<
	string UIWidget = "slider";
	float UIMax = 30;
	float UIMin = 2;
	float UIStep = 1;
> = 4.000000;

texture BaseTex
<
	string ResourceName = "";
>;

sampler diffuse_smp = sampler_state 
{
	Texture = <BaseTex>;
	MinFilter = Anisotropic;
	MagFilter = Linear;
	MipFilter = Linear;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct app_in
{
	float4 pos : POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD0;
};

struct vs_out
{
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
	float3 normal : TEXCOORD1;
	float4 wpos : TEXCOORD2;
	float4 ppos : TEXCOORD3;
};

vs_out VS( app_in IN )
{
	vs_out OUT;
	
	float4 pos = mul( IN.pos, WorldViewProj );
	OUT.pos = pos;
	OUT.ppos = pos;
	OUT.wpos = mul( IN.pos, World );
	OUT.uv = IN.uv;
	OUT.normal = mul(IN.normal.xyz,(float3x3)World );
	
	return OUT;
}

float4 PS( vs_out IN, uniform int numLights ) : COLOR
{
	float3 color = AmbientColor;
	float3 n = normalize(IN.normal);
	
	float4 texColor = tex2D( diffuse_smp, IN.uv );
	
	//this loop is optimized out depending on 'numLights' from the technique
	for ( int i = 0; i < numLights; i++ )
	{
		float range = LightPos[i].w;
		
		if ( range > 0 )
		{
			float3 l = (LightPos[i].xyz - IN.wpos.xyz);
			
			float dist = length(l);
			float att = saturate((range-dist) / range);
			
			l = normalize(l);
			float diffuse = saturate(dot(n,l));
			
			color += diffuse * att * LightColor[i];
		}
	}


	//choose colored or white light respectively
	//color = ((int) (color*lightSteps)) / lightSteps;	
	color = ((int3) (color*lightSteps)) / lightSteps;
	
	return float4(color * texColor, 0 );
}

//Choose the technique that corresponds to the number of lights used in your application
technique PerPixelLighting
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_0 PS( 0 );
	}
}

technique DBLight1
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_0 PS( 1 );
	}
}

technique DBLight2
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_0 PS( 2 );
	}
}

technique DBLight3
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_0 PS( 3 );
	}
}

technique DBLight4
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_0 PS( 4 );
	}
}

technique DBLight5
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_a PS( 5 );
	}
}

technique DBLight6
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_a PS( 6 );
	}
}

technique DBLight7
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_a PS( 7 );
	}
}

technique DBLight8
{
	pass p0
	{
		VertexShader = compile vs_1_1 VS( );
		PixelShader = compile ps_2_a PS( 8 );
	}
}
